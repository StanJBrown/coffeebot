<launch>
	<!-- ######## Define Arguments ######## -->
	<!-- general arguments -->
	<arg name="odom_topic" default="/odometry/filtered" />
	<arg name="scan_topic" default="/scan" />
	<arg name="use_laser_scanner" default="true" />
	<param name="use_sim_time" type="bool" value="True"/>

	<!-- Localization-only mode -->
  <arg name="localization"      default="false"/>
  <arg     if="$(arg localization)" name="rtabmap_args"  default=""/>
  <arg unless="$(arg localization)" name="rtabmap_args"  default="--delete_db_on_start"/>

	<!-- rtabmap arguments -->
	<arg name="visual_odometry" default="false" />
	<arg name="rgb_topic" default="/camera/rgb/image_rect_color" />
	<arg name="frame_id" default="base_link" />
	<arg name="depth_registered_topic" default="/camera/depth_registered/image_raw" />
	<arg name="camera_info_topic" default="/camera/rgb/camera_info" />
	<arg name="map_file" default="$(find coffeebot)/floor3_map.yaml"/>
	<arg name="no_static_map" default="false" />

	<!-- rtabmapviz arguments -->
	<arg name="rtabmapviz" default="true" />
	<arg name="rtabmapviz_cfg" default="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" />

	<!-- rviz arguments -->
	<arg name="rviz" default="true" />
	<arg if="$(arg localization)" name="rviz_cfg" default="-d $(find coffeebot)/config/cbrc_nav.rviz" />
	<arg unless="$(arg localization)" name="rviz_cfg" default="-d $(find coffeebot)/config/cbrc_map.rviz" />

	<!-- ######## Initialize Nodes ######## -->

	<!-- Start static transform publishers to attach the laser and kinect to the husky -->
	<!--
	<node pkg="tf" type="static_transform_publisher"
		name="kinect_tf_publisher" args="-0.5 0 0.8 0 0 0 /user_rail_link /camera_link 10" />
	<node pkg="tf" type="static_transform_publisher"
		name="laser_tf_publisher" args="-0.5 0 0.5 0 0 3.14 /user_rail_link /laser 10" />
	-->

	<!-- Start rtabmap and vizualization -->
	<group ns="rtabmap">
		<!-- remaps for rtabmap nodes -->
		<remap from="rgb/image"       to="$(arg rgb_topic)" />
		<remap from="depth/image"     to="$(arg depth_registered_topic)" />
		<remap from="rgb/camera_info" to="$(arg camera_info_topic)" />

		<!-- start the rtabmap node -->
		<node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg rtabmap_args)">
			<!-- rtabmap parameters (http://wiki.ros.org/rtabmap_ros#rtabmap) -->
			<param name="frame_id" type="string" value="$(arg frame_id)" />
			<param name="subscribe_depth" type="bool" value="true" />
			<param name="subscribe_scan" type="bool" value="true" />

			<param name="RGBD/PoseScanMatching" type="string" value="true"/>
			<param name="RGBD/LocalLoopDetectionSpace" type="string" value="true"/>
			<!--param name="LccIcp/Type" type="string" value="2"/-->     <!-- 2=ICP 2D -->
			<!--param name="LccBow/MinInliers" type="string" value="5"/-->
			<!-- param name="LccBow/InlierDistance" type="string" value="0.1"/-->
			<!--param name="RGBD/AngularUpdate" type="string" value="0.01"/-->
			<!--param name="RGBD/LinearUpdate" type="string" value="0.01"/-->
			<!-- param name="Mem/RehearsalSimilarity" type="string" value="0.45"/-->
			<param name="RGBD/NeighborLinkRefining" type="string" value="true"/>  <!-- Do odometry correction with consecutive laser scans -->
			<param name="RGBD/ProximityBySpace"     type="string" value="true"/>  <!-- Local loop closure detection (using estimated position) with locations in WM -->
			<param name="RGBD/ProximityByTime"      type="string" value="false"/> <!-- Local loop closure detection with locations in STM -->
		  	<param name="Reg/Strategy"              type="string" value="1"/>     <!-- 0=Visual, 1=ICP, 2=Visual+ICP -->
			<!--param name="Vis/InlierDistance"        type="string" value="0.1"/-->   <!-- 3D visual words correspondence distance -->
			<param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/> <!-- Optimize graph from initial node so /map -> /odom transform will be generated -->
			<param name="Optimizer/Slam2D"          type="string" value="true"/>
			<param name="Reg/Force3DoF"             type="string" value="true"/>
			<param name="Mem/MapLabelsAdded"        type="string" value="true"/>
			<param name="Vis/InlierDistance"        type="string" value="0.1"/>

			<param name="rgb/image_transport"   type="string" value="compressed"/>
			<param name="depth/image_transport" type="string" value="compressedDepth"/>

			<!-- localization mode -->
		  	<param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
		  	<param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
		  	<param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/>
			<remap from="odom"            to="$(arg odom_topic)" />
			<remap from="scan"            to="$(arg scan_topic)" />
			<param name="RGBD/AngularUpdate" type="string" value="0.01" />
			<param name="RGBD/LinearUpdate" type="string" value="0.01" />
			<param name="Rtabmap/TimeThr" type="string" value="700" />
			<param name="wait_for_transform" type="bool" value="true"/>
			<!--

			<param name="queue_size" type="int" value="10" />
			<param name="RGBD/AngularUpdate" type="string" value="0.01" />
			<param name="RGBD/LinearUpdate" type="string" value="0.01" />
			<param name="Rtabmap/TimeThr" type="string" value="700" />
			<param name="Mem/RehearsalSimilarity" type="string" value="0.45" />
			<param name="RGBD/OptimizeFromGraphEnd" type="string" value="true" />
			<param name="wait_for_transform_duration" type="double" value="10" /> -->
		</node>

		<!-- Visualization rtabmapviz -->
		<node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="$(arg rtabmapviz_cfg)" output="screen">
			<param name="subscribe_depth" type="bool" value="true"/>
			<param name="subscribe_scan" type="bool" value="$(arg use_laser_scanner)"/>
			<param name="subscribe_odom_info" type="bool" value="$(arg visual_odometry)"/>
			<param name="frame_id" type="string" value="$(arg frame_id)"/>
			<param name="wait_for_transform_duration" type="double" value="0.1"/>

			<!--<remap from="scan"            to="$(arg scan_topic)"/>-->
			<remap unless="$(arg visual_odometry)" from="odom"  to="$(arg odom_topic)"/>
			<param name="rgb/image_transport"   type="string" value="compressed"/>
			<param name="depth/image_transport" type="string" value="compressedDepth"/>
			<param name="wait_for_transform" type="bool" value="true"/>
		</node>
	</group>

	<!-- Start rviz and associated rtabmap nodelets (http://wiki.ros.org/rtabmap_ros#Nodelets) -->
	<group ns="rviz">
		<!-- Visualization RVIZ -->
		<node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="$(arg rviz_cfg)"/>
		<!-- sync cloud with odometry and voxelize the point cloud (for fast visualization in rviz) -->
		<node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="standalone_nodelet"  args="manager" output="screen"/>
		<node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="data_odom_sync" args="load rtabmap_ros/data_odom_sync standalone_nodelet">
			<remap from="rgb/image_in"        to="$(arg rgb_topic)"/>
			<remap from="depth/image_in"      to="$(arg depth_registered_topic)"/>
			<remap from="rgb/camera_info_in"  to="$(arg camera_info_topic)"/>
			<remap if="$(arg visual_odometry)"     from="odom_in"  to="rtabmap/odom"/>
			<remap unless="$(arg visual_odometry)" from="odom_in"  to="$(arg odom_topic)"/>
			<remap from="rgb/image_out"       to="data_odom_sync/image"/>
			<remap from="depth/image_out"     to="data_odom_sync/depth"/>
			<remap from="rgb/camera_info_out" to="data_odom_sync/camera_info"/>
			<remap from="odom_out"            to="odom_sync"/>
			<param name="rgb/image_transport"   type="string" value="compressed"/>
			<param name="depth/image_transport" type="string" value="compressedDepth"/>
		</node>
		<node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="points_xyzrgb" args="load rtabmap_ros/point_cloud_xyzrgb standalone_nodelet">
			<remap from="rgb/image"       to="data_odom_sync/image"/>
			<remap from="depth/image"     to="data_odom_sync/depth"/>
			<remap from="rgb/camera_info" to="data_odom_sync/camera_info"/>
			<remap from="cloud"           to="voxel_cloud" />

			<param name="decimation" type="double" value="2"/>
			<param name="voxel_size" type="double" value="0.02"/>
		</node>
	</group>

</launch>
