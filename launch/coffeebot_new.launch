<launch>
	<!-- ######## Define Arguments ######## -->
	<!-- general arguments -->
	<arg name="odom_topic" default="/odometry/filtered" />
	<arg name="scan_topic" default="/scan" />
	<arg name="use_laser_scanner" default="true" />

	<!-- Localization-only mode -->
	<arg name="localization"      default="false"/>
	<arg     if="$(arg localization)" name="rtabmap_args"  default=""/>
	<arg unless="$(arg localization)" name="rtabmap_args"  default="--delete_db_on_start"/>

	<!-- rtabmap arguments -->
	<arg name="visual_odometry" default="false" />
	<arg name="rgb_topic" default="/camera/rgb/image_rect_color" />
	<arg name="frame_id" default="base_link" />
	<arg name="depth_registered_topic" default="/camera/depth_registered/image_raw" />
	<arg name="camera_info_topic" default="/camera/rgb/camera_info" />
	<arg name="map_file" default="$(find coffeebot)/config/map.yaml"/>
	<arg name="map_building" default="$(find coffeebot)/config/floor3_map.yaml"/>
	<arg name="no_static_map" default="false" />

	<!-- rtabmapviz arguments -->
	<arg name="rtabmapviz" default="true" />
	<arg name="rtabmapviz_cfg" default="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" />

	<!-- rviz arguments -->
	<arg name="rviz" default="true" />
	<arg if="$(arg localization)" name="rviz_cfg" default="-d $(find coffeebot)/config/cbrc_nav.rviz" />
	<arg unless="$(arg localization)" name="rviz_cfg" default="-d $(find coffeebot)/config/cbrc_map.rviz" />

	<!-- ######## Initialize Nodes ######## -->
	<!-- Launch husky base -->
	<include file="$(find husky_base)/launch/base.launch" />

	<!-- Start static transform publishers to attach the laser and kinect to the husky -->
	<node pkg="tf" type="static_transform_publisher"
		name="kinect_tf_publisher" args="-0.5 0 0.8 0 0 0 /user_rail_link /camera_link 10" />
	<node pkg="tf" type="static_transform_publisher"
		name="laser_tf_publisher" args="-0.5 0 0.3 0 0 3.14 /user_rail_link /laser 10" />

	<!-- Start Kinect sensor -->
	<include file="$(find freenect_launch)/launch/freenect.launch">
		<arg name="depth_registration" value="true" />
	</include>

	<!-- Start laser scanner -->
	<node name="hokuyo" pkg="hokuyo_node" type="hokuyo_node" respawn="false" output="screen" >
		<param name="min_ang" type="double" value="-1.309"/><!---2.26,1.309" /-->
    	<param name="max_ang" type="double" value="1.309"/><!--1.309" /-->
		<param name="calibrate_time" type="bool" value="true" />
		<param name="port" type="string" value="/dev/ttyACM0" />
	</node>

	<!-- Run the map server -->
	<!--
	<group ns="floor">
		<node if="$(arg localization)" name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" >
			<remap from="/map" to="/map_floor" />
		</node>
	</group>
	-->

	<!-- Run the map server -->
	<!--
	<group ns="building">
		<node if="$(arg localization)" name="map_server" pkg="map_server" type="map_server" args="$(arg map_building)" >
			<remap from="/map" to="/map_building" />
		</node>
	</group>
	-->

	<!-- Start rtabmap and vizualization -->
	<group ns="rtabmap">
		<!-- remaps for rtabmap nodes -->
		<remap from="rgb/image"       to="$(arg rgb_topic)" />
		<remap from="depth/image"     to="$(arg depth_registered_topic)" />
		<remap from="rgb/camera_info" to="$(arg camera_info_topic)" />

		<!-- start the rtabmap node -->
		<node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg rtabmap_args)">
			<!-- Remaps for RTABMAP -->
			<remap from="odom" to="$(arg odom_topic)" />
			<remap from="scan" to="$(arg scan_topic)" />

			<!-- RTABMAP parameters (http://wiki.ros.org/rtabmap_ros#rtabmap) -->
			<param name="frame_id" type="string" value="$(arg frame_id)" />
			<param name="subscribe_depth" type="bool" value="true" />
			<param name="subscribe_scan" type="bool" value="true" />

			<param name="RGBD/NeighborLinkRefining" type="string" value="true"/> <!-- Do odometry correction with consecutive laser scans -->

			<!-- Parameters used for flat surface environments -->
			<param name="Optimizer/Slam2D" type="string" value="true"/> <!-- Optimize on only 3 degrees of freedom (x, y, theta) -->
			<param name="Reg/Force3DoF" type="string" value="true"/> <!-- Force 3 degrees of freedom transform -->
			<param name="Reg/Strategy" type="string" value="2"/> <!-- 0=Visual, 1=ICP, 2=Visual+ICP -->

			<!-- Optimize graph from initial node so /map -> /odom transform will be generated -->
			<param if="$(arg localization)" name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/>
			<param unless="$(arg localization)" name="RGBD/OptimizeFromGraphEnd" type="string" value="true"/>
			<param name="Mem/MapLabelsAdded" type="string" value="true"/> <!-- Add labels to the map -->
			<param name="Optimizer/Robust" type="string" value="true" /> <!-- Optimizes using vertigo, -->

			<!-- Are these even RTABMAP params? -->
			<param name="rgb/image_transport"   type="string" value="compressed"/>
			<param name="depth/image_transport" type="string" value="compressedDepth"/>

			<!-- Localization mode -->
			<param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
			<param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
			<param unless="$(arg localization)" name="map_filter_radius"  type="double" value="0"/>

			<!-- Initialize the Working Memory with all nodes in Long-Term Memory.
				When false, it is initialized with nodes of the previous session -->
			<param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/>

			<!-- Prevent scan from updating map -->
			<param if="$(arg localization)" name="map_negative_poses_ignored" type="bool" value="true" />

			<!-- Maximum time allowed to update the map (ms) (0 means infinity). -->
			<param unless="$(arg localization)" name="Rtabmap/TimeThr" type="string" value="700" />
		</node>

		<!-- Visualization rtabmapviz -->
		<node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="$(arg rtabmapviz_cfg)" output="screen">
			<param name="subscribe_depth" type="bool" value="true"/>
			<param name="subscribe_scan" type="bool" value="$(arg use_laser_scanner)"/>
			<param name="subscribe_odom_info" type="bool" value="$(arg visual_odometry)"/>
			<param name="frame_id" type="string" value="$(arg frame_id)"/>
			<param name="wait_for_transform_duration" type="double" value="0.1"/>

			<!--<remap from="scan"            to="$(arg scan_topic)"/>-->
			<remap unless="$(arg visual_odometry)" from="odom"  to="$(arg odom_topic)"/>
			<param name="rgb/image_transport"   type="string" value="compressed"/>
			<param name="depth/image_transport" type="string" value="compressedDepth"/>
		</node>
	</group>

	<!-- Start rviz and associated rtabmap nodelets (http://wiki.ros.org/rtabmap_ros#Nodelets) -->
	<group ns="rviz">
		<!-- Visualization RVIZ -->
		<node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="$(arg rviz_cfg)"/>
		<!-- sync cloud with odometry and voxelize the point cloud (for fast visualization in rviz) -->
		<node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="standalone_nodelet"  args="manager" output="screen"/>
		<node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="data_odom_sync" args="load rtabmap_ros/data_odom_sync standalone_nodelet">
			<remap from="rgb/image_in"        to="$(arg rgb_topic)"/>
			<remap from="depth/image_in"      to="$(arg depth_registered_topic)"/>
			<remap from="rgb/camera_info_in"  to="$(arg camera_info_topic)"/>
			<remap if="$(arg visual_odometry)"     from="odom_in"  to="rtabmap/odom"/>
			<remap unless="$(arg visual_odometry)" from="odom_in"  to="$(arg odom_topic)"/>
			<remap from="rgb/image_out"       to="data_odom_sync/image"/>
			<remap from="depth/image_out"     to="data_odom_sync/depth"/>
			<remap from="rgb/camera_info_out" to="data_odom_sync/camera_info"/>
			<remap from="odom_out"            to="odom_sync"/>
			<param name="rgb/image_transport"   type="string" value="compressed"/>
			<param name="depth/image_transport" type="string" value="compressedDepth"/>
		</node>
		<node if="$(arg rviz)" pkg="nodelet" type="nodelet" name="points_xyzrgb" args="load rtabmap_ros/point_cloud_xyzrgb standalone_nodelet">
			<remap from="rgb/image"       to="data_odom_sync/image"/>
			<remap from="depth/image"     to="data_odom_sync/depth"/>
			<remap from="rgb/camera_info" to="data_odom_sync/camera_info"/>
			<remap from="cloud"           to="voxel_cloud" />

			<param name="decimation" type="double" value="2"/>
			<param name="voxel_size" type="double" value="0.02"/>
		</node>
	</group>

	<!-- Navigation Stack -->
	<!--<arg name="base_global_planner" default="navfn/NavfnROS"/>-->
	<arg name="base_global_planner" default="global_planner/GlobalPlanner"/>
	<arg name="base_local_planner" default="dwa_local_planner/DWAPlannerROS"/>
	<!--<arg name="base_local_planner" default="base_local_planner/TrajectoryPlannerROS"/>-->

	<node if="$(arg localization)" pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
		<remap from="map" to="/rtabmap/grid_map" />
		<remap from="scan" to="$(arg scan_topic)" />

		<param name="base_global_planner" value="$(arg base_global_planner)"/>
	  	<param name="base_local_planner" value="$(arg base_local_planner)"/>
		<rosparam file="$(find coffeebot)/config/planner.yaml" command="load"/>

		<!-- observation sources located in costmap_common.yaml -->
		<rosparam file="$(find coffeebot)/config/costmap_common.yaml" command="load" ns="global_costmap" />
		<rosparam file="$(find coffeebot)/config/costmap_common.yaml" command="load" ns="local_costmap" />

		<!-- local costmap, needs size -->
		<rosparam file="$(find coffeebot)/config/costmap_local.yaml" command="load" ns="local_costmap" />
		<param name="local_costmap/width" value="10.0"/>
		<param name="local_costmap/height" value="10.0"/>

		<!-- static global costmap, static map provides size -->
		<rosparam file="$(find coffeebot)/config/costmap_global_static.yaml" command="load" ns="global_costmap" unless="$(arg no_static_map)"/>

		<!-- global costmap with laser, for odom_navigation_demo -->
		<!--
		<rosparam file="$(find coffeebot)/config/costmap_global_laser.yaml" command="load" ns="global_costmap" if="$(arg no_static_map)"/>
		<param name="global_costmap/width" value="100.0" if="$(arg no_static_map)"/>
		<param name="global_costmap/height" value="100.0" if="$(arg no_static_map)"/> -->
	</node>

</launch>
